from aiogram import Router, F
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime

from bot.database.models import get_session, User, Application
from bot.utils.config import Config
from bot.utils.roles import UserRole
from bot.keyboards.registration import application_kb
from bot.keyboards.main_menu import main_menu_kb

router = Router()

class Registration(StatesGroup):
    question1 = State()
    question2 = State()
    question3 = State()

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    with get_session() as session:
        user = session.query(User).filter_by(user_id=message.from_user.id).first()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        if user and user.status in [UserRole.WORKER, UserRole.MENTOR, UserRole.ADMIN]:
            await message.answer_photo(
                photo=FSInputFile(Config.MENU_PHOTO_PATH),
                caption="üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=main_menu_kb(message.from_user.id)
            )
            return
        
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
        if user and user.status == UserRole.PENDING:
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
            return
    
    # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.set_state(Registration.question1)
    await message.answer(
        "üìù –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞:\n\n"
        "1. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã?",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(Registration.question1)
async def process_question1(message: Message, state: FSMContext):
    if len(message.text) < 10:
        return await message.answer("‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
    
    await state.update_data(answer1=message.text)
    await state.set_state(Registration.question2)
    await message.answer("2. –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ?")

@router.message(Registration.question2)
async def process_question2(message: Message, state: FSMContext):
    if len(message.text) < 10:
        return await message.answer("‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
    
    await state.update_data(answer2=message.text)
    await state.set_state(Registration.question3)
    await message.answer("3. –ö–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?")

@router.message(Registration.question3)
async def process_question3(message: Message, state: FSMContext):
    if len(message.text) < 5:
        return await message.answer("‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤")
    
    data = await state.get_data()
    
    with get_session() as session:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(user_id=message.from_user.id).first()
        if not user:
            user = User(
                user_id=message.from_user.id,
                username=message.from_user.username,
                status=UserRole.PENDING,
                registration_date=datetime.now()
            )
            session.add(user)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        application = Application(
            user_id=user.id,
            answer1=data['answer1'],
            answer2=data['answer2'],
            answer3=message.text,
            created_at=datetime.now()
        )
        session.add(application)
        session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∞–º
    app_text = (
        "üìÑ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–Ω–µ—Ç'}\n"
        f"üÜî ID: {message.from_user.id}\n\n"
        "1. *–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:*\n" + data['answer1'] + "\n\n"
        "2. *–ü—Ä–∏—á–∏–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:*\n" + data['answer2'] + "\n\n"
        "3. *–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n" + message.text
    )
    
    try:
        await message.bot.send_message(
            chat_id=Config.ADMIN_CHAT_ID,
            text=app_text,
            parse_mode="Markdown",
            reply_markup=application_kb(user.id)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
    
    await state.clear()
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )