from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.database.models import Session, Mentor, User
from bot.utils.config import Config
from bot.keyboards.main_menu import main_menu_kb
from bot.utils.roles import UserRole

router = Router()

class MentorForm(StatesGroup):
    direction = State()
    commission = State()
    description = State()

@router.message(F.text == "üìù –ê–Ω–∫–µ—Ç–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
async def start_mentor_form(message: Message, state: FSMContext):
    with Session() as session:
        user = session.query(User).filter_by(user_id=message.from_user.id).first()
        if not user or user.status != UserRole.MENTOR:
            return await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º!")
    
    await state.set_state(MentorForm.direction)
    await message.answer(
        "üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(MentorForm.direction)
async def process_direction(message: Message, state: FSMContext):
    await state.update_data(direction=message.text)
    await state.set_state(MentorForm.commission)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 20):")

@router.message(MentorForm.commission)
async def process_commission(message: Message, state: FSMContext):
    try:
        commission = float(message.text)
        if commission <= 0 or commission > 100:
            raise ValueError
        await state.update_data(commission=commission)
        await state.set_state(MentorForm.description)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã:")
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100)!")

@router.message(MentorForm.description)
async def process_description(message: Message, state: FSMContext):
    data = await state.get_data()
    
    with Session() as session:
        mentor = session.query(Mentor).filter_by(user_id=message.from_user.id).first()
        if not mentor:
            mentor = Mentor(user_id=message.from_user.id)
            session.add(mentor)
        
        mentor.direction = data['direction']
        mentor.commission = data['commission']
        mentor.description = message.text
        session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
        reply_markup=main_menu_kb(message.from_user.id)
    )