from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from sqlalchemy import func

from bot.database.models import get_session, User, Profit, Mentor, Application
from bot.utils.config import Config
from bot.utils.roles import UserRole
from bot.keyboards.registration import application_kb
from bot.keyboards.main_menu import main_menu_kb

router = Router()

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    with get_session() as session:
        user = session.query(User).filter_by(user_id=user_id).first()
        return user and user.status == UserRole.ADMIN

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    
    with get_session() as session:
        stats = {
            "users": session.query(User).count(),
            "workers": session.query(User).filter_by(status=UserRole.WORKER).count(),
            "mentors": session.query(User).filter_by(status=UserRole.MENTOR).count(),
            "pending": session.query(Application).count(),
            "profits": session.query(func.sum(Profit.amount)).scalar() or 0
        }
    
    text = (
        "‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"üë∑ –í–æ—Ä–∫–µ—Ä–æ–≤: {stats['workers']}\n"
        f"üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤: {stats['mentors']}\n"
        f"üìù –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {stats['pending']}\n"
        f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {stats['profits']} RUB\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/applications - –∑–∞—è–≤–∫–∏"
    )
    await message.answer(text, parse_mode="Markdown")

@router.message(Command("help"))
async def admin_help(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    help_text = (
        "üìå *–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã*\n\n"
        "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:\n"
        "/setrole [id] [role] - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å\n"
        "/find [id] - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "üìù –ó–∞—è–≤–∫–∏:\n"
        "/applications - –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫\n"
        "/approve [id] - –û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        "/reject [id] - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "üí∞ –ü—Ä–æ—Ñ–∏—Ç—ã:\n"
        "/profit [id] [sum] [direction] [service] - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç\n"
        "/profits [id] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏:\n"
        "/mentor [id] [direction] [%] - –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º\n"
        "/mentors - –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/setrole 123456 –ù–∞—Å—Ç–∞–≤–Ω–∏–∫\n"
        "/profit 123456 5000 –û–±–Ω–∞–ª Binance\n"
        "/mentor 789123 –û–±–Ω–∞–ª 20"
    )
    await message.answer(help_text, parse_mode="Markdown")

@router.message(Command("applications"))
async def list_applications(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    with get_session() as session:
        apps = session.query(Application).order_by(Application.created_at.desc()).limit(10).all()
    
    if not apps:
        return await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏")
    
    text = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫:*\n\n"
    for app in apps:
        text += (
            f"üÜî {app.user_id} | {app.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üëâ {app.answer1[:30]}...\n\n"
        )
    
    await message.answer(text, parse_mode="Markdown")

@router.callback_query(F.data.startswith("app_"))
async def process_application(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    
    action, user_id = callback.data.split("_")[1], int(callback.data.split("_")[2])
    
    with get_session() as session:
        user = session.query(User).get(user_id)
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if action == "approve":
            user.status = UserRole.WORKER
            try:
                await callback.bot.send_message(
                    chat_id=user.user_id,
                    text="‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n–í–≤–µ–¥–∏—Ç–µ /start",
                    parse_mode="Markdown",
                    reply_markup=main_menu_kb(user.user_id)
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            user.status = UserRole.REJECTED
        
        session.query(Application).filter_by(user_id=user.id).delete()
        session.commit()
    
    await callback.answer(f"–ó–∞—è–≤–∫–∞ {'–æ–¥–æ–±—Ä–µ–Ω–∞' if action == 'approve' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}")
    await callback.message.edit_reply_markup(reply_markup=None)

@router.message(Command("setrole"))
async def set_role(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    try:
        _, user_id, role = message.text.split()
        user_id = int(user_id)
        role = UserRole[role.upper()]
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setrole [id] [role]")
    except KeyError:
        return await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join([r.value for r in UserRole])}")
    
    with get_session() as session:
        user = session.query(User).filter_by(user_id=user_id).first()
        if not user:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user.status = role
        session.commit()
    
    await message.answer(f"‚úÖ –†–æ–ª—å {role.value} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@router.message(Command("profit"))
async def add_profit(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        amount = float(parts[2])
        direction = ' '.join(parts[3:-1])
        service = parts[-1]
    except:
        return await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/profit [id] [sum] [direction] [service]\n"
            "–ü—Ä–∏–º–µ—Ä: /profit 123456 5000 –û–±–Ω–∞–ª Binance"
        )
    
    with get_session() as session:
        user = session.query(User).filter_by(user_id=user_id).first()
        if not user:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        profit = Profit(
            user_id=user.id,
            amount=amount,
            direction=direction,
            service=service,
            date=datetime.now()
        )
        session.add(profit)
        
        if user.mentor:
            mentor_profit = Profit(
                user_id=user.mentor.user_id,
                amount=amount * (user.mentor.commission / 100),
                direction=f"–ö–æ–º–∏—Å—Å–∏—è –æ—Ç {user_id}",
                service=service,
                date=datetime.now()
            )
            session.add(mentor_profit)
        
        session.commit()
        
        profit_text = (
            "# ü¶à –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n"
            f"‚îúüí∏ –°—É–º–º–∞: {amount} RUB\n"
            f"‚îú‚õèÔ∏è –í–æ—Ä–∫–µ—Ä: @{user.username if user.username else user.user_id}\n"
        )
        
        if user.mentor:
            profit_text += f"‚îúüìö –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: @{user.mentor.user.username}\n"
        
        profit_text += f"‚îîüíµ –°–µ—Ä–≤–∏—Å: {service}"
        
        await message.bot.send_message(
            chat_id=Config.PROFIT_CHAT_ID,
            text=profit_text
        )
    
    await message.answer(f"‚úÖ –ü—Ä–æ—Ñ–∏—Ç {amount} RUB –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@router.message(Command("mentor"))
async def set_mentor(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    try:
        _, user_id, direction, commission = message.text.split(maxsplit=3)
        user_id = int(user_id)
        commission = float(commission)
    except:
        return await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/mentor [id] [direction] [commission%]\n"
            "–ü—Ä–∏–º–µ—Ä: /mentor 789123 –û–±–Ω–∞–ª 20"
        )
    
    with get_session() as session:
        user = session.query(User).filter_by(user_id=user_id).first()
        if not user:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        mentor = session.query(Mentor).filter_by(user_id=user_id).first()
        if not mentor:
            mentor = Mentor(user_id=user_id)
            session.add(mentor)
        
        mentor.direction = direction
        mentor.commission = commission
        user.status = UserRole.MENTOR
        session.commit()
    
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º:\n"
        f"üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
        f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission}%"
    )

@router.message(Command("mentors"))
async def list_mentors(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    with get_session() as session:
        mentors = session.query(Mentor).join(User).all()
    
    if not mentors:
        return await message.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤")
    
    text = "üë®‚Äçüè´ *–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤:*\n\n"
    for mentor in mentors:
        text += (
            f"üÜî {mentor.user_id}\n"
            f"üë§ @{mentor.user.username if mentor.user.username else '–Ω–µ—Ç'}\n"
            f"üìç {mentor.direction}\n"
            f"üí∏ {mentor.commission}%\n"
            f"üìù {mentor.description[:50] if mentor.description else '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}...\n\n"
        )
    
    await message.answer(text, parse_mode="Markdown")